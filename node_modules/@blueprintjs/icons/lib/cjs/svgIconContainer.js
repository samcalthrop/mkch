"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SVGIconContainer = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
/*
 * Copyright 2023 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const react_1 = require("react");
const Classes = tslib_1.__importStar(require("./classes"));
const iconTypes_1 = require("./iconTypes");
const jsUtils_1 = require("./jsUtils");
exports.SVGIconContainer = (0, react_1.forwardRef)((props, ref) => {
    const { children, className, color, htmlTitle, iconName, size = iconTypes_1.IconSize.STANDARD, svgProps, tagName = "span", title, ...htmlProps } = props;
    const isLarge = size >= iconTypes_1.IconSize.LARGE;
    const pixelGridSize = isLarge ? iconTypes_1.IconSize.LARGE : iconTypes_1.IconSize.STANDARD;
    const viewBox = `0 0 ${pixelGridSize} ${pixelGridSize}`;
    const titleId = (0, jsUtils_1.uniqueId)("iconTitle");
    const sharedSvgProps = {
        fill: color,
        height: size,
        role: "img",
        viewBox,
        width: size,
        ...svgProps,
    };
    if (tagName === null) {
        return ((0, jsx_runtime_1.jsxs)("svg", { "aria-labelledby": title ? titleId : undefined, "data-icon": iconName, ref: ref, ...sharedSvgProps, ...htmlProps, className: (0, classnames_1.default)(className, svgProps === null || svgProps === void 0 ? void 0 : svgProps.className), children: [title && (0, jsx_runtime_1.jsx)("title", { id: titleId, children: title }), children] }));
    }
    else {
        // N.B. styles for `Classes.ICON` are defined in @blueprintjs/core in `_icon.scss`
        return (0, react_1.createElement)(tagName, {
            "aria-hidden": title ? undefined : true,
            ...htmlProps,
            className: (0, classnames_1.default)(Classes.ICON, `${Classes.ICON}-${iconName}`, className),
            ref,
            title: htmlTitle,
        }, (0, jsx_runtime_1.jsxs)("svg", { "data-icon": iconName, ...sharedSvgProps, className: svgProps === null || svgProps === void 0 ? void 0 : svgProps.className, children: [title && (0, jsx_runtime_1.jsx)("title", { children: title }), children] }));
    }
});
exports.SVGIconContainer.displayName = "Blueprint6.SVGIconContainer";
//# sourceMappingURL=svgIconContainer.js.map