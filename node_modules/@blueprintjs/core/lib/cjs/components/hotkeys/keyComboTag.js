"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyComboTag = exports.KeyComboTagInternal = exports.DISPLAY_ALIASES = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
/*
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const react_1 = require("react");
const icons_1 = require("@blueprintjs/icons");
const common_1 = require("../../common");
const icon_1 = require("../icon/icon");
const hotkeyParser_1 = require("./hotkeyParser");
const KEY_ICONS = {
    alt: { icon: (0, jsx_runtime_1.jsx)(icons_1.KeyOption, {}), iconTitle: "Alt/Option key", isMacOnly: true },
    arrowdown: { icon: (0, jsx_runtime_1.jsx)(icons_1.ArrowDown, {}), iconTitle: "Down key" },
    arrowleft: { icon: (0, jsx_runtime_1.jsx)(icons_1.ArrowLeft, {}), iconTitle: "Left key" },
    arrowright: { icon: (0, jsx_runtime_1.jsx)(icons_1.ArrowRight, {}), iconTitle: "Right key" },
    arrowup: { icon: (0, jsx_runtime_1.jsx)(icons_1.ArrowUp, {}), iconTitle: "Up key" },
    cmd: { icon: (0, jsx_runtime_1.jsx)(icons_1.KeyCommand, {}), iconTitle: "Command key", isMacOnly: true },
    ctrl: { icon: (0, jsx_runtime_1.jsx)(icons_1.KeyControl, {}), iconTitle: "Control key", isMacOnly: true },
    delete: { icon: (0, jsx_runtime_1.jsx)(icons_1.KeyDelete, {}), iconTitle: "Delete key" },
    enter: { icon: (0, jsx_runtime_1.jsx)(icons_1.KeyEnter, {}), iconTitle: "Enter key" },
    meta: { icon: (0, jsx_runtime_1.jsx)(icons_1.KeyCommand, {}), iconTitle: "Command key", isMacOnly: true },
    shift: { icon: (0, jsx_runtime_1.jsx)(icons_1.KeyShift, {}), iconTitle: "Shift key", isMacOnly: true },
};
/** Reverse table of some CONFIG_ALIASES fields, for display by KeyComboTag */
exports.DISPLAY_ALIASES = {
    arrowdown: "down",
    arrowleft: "left",
    arrowright: "right",
    arrowup: "up",
};
class KeyComboTagInternal extends common_1.AbstractPureComponent {
    constructor() {
        super(...arguments);
        this.renderKey = (key, index) => {
            var _a;
            const keyString = (_a = exports.DISPLAY_ALIASES[key.toLowerCase()]) !== null && _a !== void 0 ? _a : key;
            const icon = this.getKeyIcon(key);
            const reactKey = `key-${index}`;
            return ((0, jsx_runtime_1.jsxs)("kbd", { className: (0, classnames_1.default)(common_1.Classes.KEY, { [common_1.Classes.MODIFIER_KEY]: icon != null }), children: [icon != null && (0, jsx_runtime_1.jsx)(icon_1.Icon, { icon: icon.icon, title: icon.iconTitle }), keyString] }, reactKey));
        };
        this.renderMinimalKey = (key, index, isLastKey) => {
            const icon = this.getKeyIcon(key);
            if (icon == null) {
                return isLastKey ? key : (0, jsx_runtime_1.jsxs)(react_1.Fragment, { children: [key, "\u00A0+\u00A0"] }, `key-${index}`);
            }
            return (0, jsx_runtime_1.jsx)(icon_1.Icon, { icon: icon.icon, title: icon.iconTitle }, `key-${index}`);
        };
    }
    render() {
        const { className, combo, minimal, platformOverride } = this.props;
        const normalizedKeys = (0, hotkeyParser_1.normalizeKeyCombo)(combo, platformOverride);
        const keys = normalizedKeys
            .map(key => (key.length === 1 ? key.toUpperCase() : key))
            .map((key, index) => minimal
            ? this.renderMinimalKey(key, index, index === normalizedKeys.length - 1)
            : this.renderKey(key, index));
        return (0, jsx_runtime_1.jsx)("span", { className: (0, classnames_1.default)(common_1.Classes.KEY_COMBO, className, { [common_1.Classes.MINIMAL]: minimal }), children: keys });
    }
    getKeyIcon(key) {
        const { platformOverride } = this.props;
        const icon = KEY_ICONS[key.toLowerCase()];
        if ((icon === null || icon === void 0 ? void 0 : icon.isMacOnly) && !(0, hotkeyParser_1.isMac)(platformOverride)) {
            return undefined;
        }
        return icon;
    }
}
exports.KeyComboTagInternal = KeyComboTagInternal;
KeyComboTagInternal.displayName = `${common_1.DISPLAYNAME_PREFIX}.KeyComboTag`;
exports.KeyComboTag = KeyComboTagInternal;
//# sourceMappingURL=keyComboTag.js.map