/// <reference types="react" />
import { type HotkeyConfig, type UseHotkeysOptions } from "../../hooks";
/** Identical to the return type of `useHotkeys` hook. */
export interface HotkeysTargetRenderProps {
    handleKeyDown: React.KeyboardEventHandler<HTMLElement>;
    handleKeyUp: React.KeyboardEventHandler<HTMLElement>;
}
/** @deprecated Use `HotkeysTargetRenderProps` instead */
export type HotkeysTarget2RenderProps = HotkeysTargetRenderProps;
export interface HotkeysTargetProps {
    /**
     * Render prop which receives the same callback handlers generated by the `useHotkeys` hook.
     * If your hotkey definitions are all global, you may supply an element instead.
     */
    children: React.JSX.Element | ((props: HotkeysTargetRenderProps) => React.JSX.Element);
    /** Hotkey definitions. */
    hotkeys: readonly HotkeyConfig[];
    /** Hook customization options. */
    options?: UseHotkeysOptions;
}
/** @deprecated Use `HotkeysTargetProps` instead */
export type HotkeysTarget2Props = HotkeysTargetProps;
/**
 * Utility component which allows consumers to use the new `useHotkeys` hook inside
 * React component classes. The implementation simply passes through to the hook.
 */
export declare const HotkeysTarget: ({ children, hotkeys, options }: HotkeysTargetProps) => React.JSX.Element;
/** @deprecated Use `HotkeysTarget` instead */
export declare const HotkeysTarget2: ({ children, hotkeys, options }: HotkeysTargetProps) => React.JSX.Element;
