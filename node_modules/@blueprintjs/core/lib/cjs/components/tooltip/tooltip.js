"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
/*
 * Copyright 2021 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const react_1 = require("react");
const common_1 = require("../../common");
const Classes = tslib_1.__importStar(require("../../common/classes"));
const popover_1 = require("../popover/popover");
const popoverArrow_1 = require("../popover/popoverArrow");
const tooltipContext_1 = require("../popover/tooltipContext");
/**
 * Tooltip component.
 *
 * @see https://blueprintjs.com/docs/#core/components/tooltip
 */
class Tooltip extends common_1.AbstractPureComponent {
    constructor() {
        super(...arguments);
        this.popoverRef = (0, react_1.createRef)();
        // any descendant ContextMenus may update this ctxState
        this.renderPopover = (ctxState) => {
            var _a;
            const { children, compact, disabled, intent, popoverClassName, ...restProps } = this.props;
            const popoverClasses = (0, classnames_1.default)(Classes.TOOLTIP, Classes.intentClass(intent), popoverClassName, {
                [Classes.COMPACT]: compact,
            });
            return ((0, jsx_runtime_1.jsx)(popover_1.Popover, { modifiers: {
                    arrow: {
                        enabled: !this.props.minimal,
                    },
                    offset: {
                        options: {
                            offset: [0, popoverArrow_1.TOOLTIP_ARROW_SVG_SIZE / 2],
                        },
                    },
                }, ...restProps, autoFocus: false, canEscapeKeyClose: false, disabled: (_a = ctxState.forceDisabled) !== null && _a !== void 0 ? _a : disabled, enforceFocus: false, lazy: true, popoverClassName: popoverClasses, portalContainer: this.props.portalContainer, ref: this.popoverRef, children: children }));
        };
    }
    render() {
        // if we have an ancestor TooltipContext, we should take its state into account in this render path,
        // it was likely created by a parent ContextMenu
        return ((0, jsx_runtime_1.jsx)(tooltipContext_1.TooltipContext.Consumer, { children: ([state]) => (0, jsx_runtime_1.jsx)(tooltipContext_1.TooltipProvider, { ...state, children: this.renderPopover }) }));
    }
    reposition() {
        var _a;
        (_a = this.popoverRef.current) === null || _a === void 0 ? void 0 : _a.reposition();
    }
}
exports.Tooltip = Tooltip;
Tooltip.displayName = `${common_1.DISPLAYNAME_PREFIX}.Tooltip`;
Tooltip.defaultProps = {
    compact: false,
    hoverCloseDelay: 0,
    hoverOpenDelay: 100,
    interactionKind: "hover-target",
    minimal: false,
    transitionDuration: 100,
};
//# sourceMappingURL=tooltip.js.map