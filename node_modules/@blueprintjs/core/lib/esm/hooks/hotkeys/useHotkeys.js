/*
 * Copyright 2021 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { useCallback, useContext, useEffect, useMemo } from "react";
import { HOTKEYS_PROVIDER_NOT_FOUND } from "../../common/errors";
import { elementIsTextInput } from "../../common/utils/domUtils";
import { comboMatches, getKeyCombo, parseKeyCombo } from "../../components/hotkeys/hotkeyParser";
import { HotkeysContext } from "../../context";
/**
 * React hook to register global and local hotkeys for a component.
 *
 * @see https://blueprintjs.com/docs/#core/hooks/use-hotkeys
 * @param keys list of hotkeys to configure
 * @param options hook options
 */
export function useHotkeys(keys, options = {}) {
    const { document = getDefaultDocument(), showDialogKeyCombo = "?" } = options;
    const localKeys = useMemo(() => keys
        .filter(k => !k.global)
        .map(k => ({
        combo: parseKeyCombo(k.combo),
        config: k,
    })), [keys]);
    const globalKeys = useMemo(() => keys
        .filter(k => k.global)
        .map(k => ({
        combo: parseKeyCombo(k.combo),
        config: k,
    })), [keys]);
    // register keys with global context
    const [state, dispatch] = useContext(HotkeysContext);
    useEffect(() => {
        if (!state.hasProvider) {
            console.warn(HOTKEYS_PROVIDER_NOT_FOUND);
        }
    }, [state.hasProvider]);
    // we can still bind the hotkeys if there is no HotkeysProvider, they just won't show up in the dialog
    useEffect(() => {
        const payload = [...globalKeys.map(k => k.config), ...localKeys.map(k => k.config)];
        dispatch({ payload, type: "ADD_HOTKEYS" });
        return () => dispatch({ payload, type: "REMOVE_HOTKEYS" });
    }, [dispatch, globalKeys, localKeys]);
    const invokeNamedCallbackIfComboRecognized = useCallback((global, combo, callbackName, e) => {
        var _a, _b;
        const isTextInput = elementIsTextInput(e.target);
        for (const key of global ? globalKeys : localKeys) {
            const { allowInInput = false, disabled = false, preventDefault = false, stopPropagation = false, } = key.config;
            const shouldIgnore = (isTextInput && !allowInInput) || disabled;
            if (!shouldIgnore && comboMatches(key.combo, combo)) {
                if (preventDefault) {
                    e.preventDefault();
                }
                if (stopPropagation) {
                    // set a flag just for unit testing. not meant to be referenced in feature work.
                    e.isPropagationStopped = true;
                    e.stopPropagation();
                }
                (_b = (_a = key.config)[callbackName]) === null || _b === void 0 ? void 0 : _b.call(_a, e);
            }
        }
    }, [globalKeys, localKeys]);
    const handleGlobalKeyDown = useCallback((e) => {
        // special case for global keydown: if '?' is pressed, open the hotkeys dialog
        const combo = getKeyCombo(e);
        const isTextInput = elementIsTextInput(e.target);
        if (!isTextInput && comboMatches(parseKeyCombo(showDialogKeyCombo), combo)) {
            dispatch({ type: "OPEN_DIALOG" });
        }
        else {
            invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), "onKeyDown", e);
        }
    }, [dispatch, invokeNamedCallbackIfComboRecognized, showDialogKeyCombo]);
    const handleGlobalKeyUp = useCallback((e) => invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), "onKeyUp", e), [invokeNamedCallbackIfComboRecognized]);
    const handleLocalKeyDown = useCallback((e) => invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), "onKeyDown", e.nativeEvent), [invokeNamedCallbackIfComboRecognized]);
    const handleLocalKeyUp = useCallback((e) => invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), "onKeyUp", e.nativeEvent), [invokeNamedCallbackIfComboRecognized]);
    useEffect(() => {
        // document is guaranteed to be defined inside effects
        document.addEventListener("keydown", handleGlobalKeyDown);
        document.addEventListener("keyup", handleGlobalKeyUp);
        return () => {
            document.removeEventListener("keydown", handleGlobalKeyDown);
            document.removeEventListener("keyup", handleGlobalKeyUp);
        };
    }, [document, handleGlobalKeyDown, handleGlobalKeyUp]);
    return { handleKeyDown: handleLocalKeyDown, handleKeyUp: handleLocalKeyUp };
}
function getDefaultDocument() {
    if (typeof window === "undefined") {
        return undefined;
    }
    return window.document;
}
//# sourceMappingURL=useHotkeys.js.map